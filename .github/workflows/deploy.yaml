name: CI/CD Pipeline
#-

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: ./gradlew clean build

      - name: Extract JAR_NAME
        id: extract-jar-name
        run: echo "JAR_NAME=$(./gradlew -q printJarInfo)" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg JAR_FILE=$JAR_NAME \
            -t hanyohan/spring-backend-image:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push hanyohan/spring-backend-image:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker pull hanyohan/spring-backend-image:latest
            docker stop spring-backend-app || true
            docker rm spring-backend-app || true
            docker run -d --name spring-backend-app -p 8080:8080 \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              hanyohan/spring-backend-image:latest
          
